.TH "src/fs/iso9660/iso9660_read.c" 3 "Wed Nov 12 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/fs/iso9660/iso9660_read.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/fs\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br
\fC#include <aplus/spinlock\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <dirent\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include 'iso9660\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBiso9660_read\fP (\fBinode_t\fP *ino, char *buf, int \fBsize\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int iso9660_read (\fBinode_t\fP *ino, char *buf, intsize)"

.PP
Definition at line 16 of file iso9660_read\&.c\&.
.PP
References inode::dev, devfs_getdevice(), fs_read(), ISO9660_SECTOR_SIZE, kfree(), kmalloc(), inode::position, inode::size, size, uint32_t, and inode::userdata\&.
.PP
.nf
16                                                     {
17     if(!ino)
18         return 0;
19         
20     if(!buf)
21         return 0;
22         
23     if(size > ino->size)
24         size = ino->size;
25         
26     if(ino->position > ino->size)
27         ino->position = ino->size;
28         
29     if(ino->position + size > ino->size)
30         size = ino->size - ino->position;
31         
32     if(!size)
33         return 0;
34 
35     inode_t* dev = (inode_t*) devfs_getdevice(ino->dev);
36     if(!dev)
37         return 0;
38 
39     void* tbuf = (void*) kmalloc(((size / ISO9660_SECTOR_SIZE) + 1) * ISO9660_SECTOR_SIZE);
40     
41     dev->position = (off_t) ino->userdata + (ino->position / ISO9660_SECTOR_SIZE);
42     fs_read(dev, tbuf, ((size / ISO9660_SECTOR_SIZE) + 1) * ISO9660_SECTOR_SIZE);
43 
44     memcpy(buf, (void*) ((uint32_t) tbuf + (ino->position % ISO9660_SECTOR_SIZE)), size);
45     kfree(tbuf);
46 
47     return size;
48 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
