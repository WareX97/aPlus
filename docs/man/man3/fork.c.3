.TH "src/syscall/fork.c" 3 "Sun Nov 9 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/syscall/fork.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/syscall\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsys_fork\fP ()"
.br
.RI "\fIfork() creates a new process by duplicating the calling process\&.
.br
 The new process, referred to as the child, is an exact duplicate of the calling process, referred to as the parent\&. \fP"
.ti -1c
.RI "\fBSYSCALL\fP (\fBsys_fork\fP, 3)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int sys_fork ()"

.PP
fork() creates a new process by duplicating the calling process\&.
.br
 The new process, referred to as the child, is an exact duplicate of the calling process, referred to as the parent\&. 
.PP
\fBReturns:\fP
.RS 4
On success, the PID of the child process is returned in the parent, and 0 is returned in the child\&.
.br
 On failure, -1 is returned in the parent, no child process is created, and errno is set appropriately\&. 
.RE
.PP

.PP
Definition at line 19 of file fork\&.c\&.
.PP
References task::pid, and task_fork()\&.
.PP
.nf
19                {
20     task_t* child = (task_t*) task_fork();
21     
22     if(child)
23         return child->pid;
24     else
25         return 0;
26 }
.fi
.SS "SYSCALL (\fBsys_fork\fP, 3)"

.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
