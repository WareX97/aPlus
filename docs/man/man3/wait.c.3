.TH "src/syscall/wait.c" 3 "Sun Nov 9 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/syscall/wait.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/syscall\&.h>\fP
.br
\fC#include <aplus/fs\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsys_wait\fP (int *status)"
.br
.ti -1c
.RI "\fBSYSCALL\fP (\fBsys_wait\fP, 16)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBtask_t\fP * \fBcurrent_task\fP"
.br
.RI "\fICurrent task address\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "int sys_wait (int *status)"

.PP
Definition at line 12 of file wait\&.c\&.
.PP
References errno, task::pid, schedule_child(), and schedule_wait()\&.
.PP
.nf
12                           {
13     if(current_task == NULL) {
14         errno = EFAULT;
15         return -1;
16     }
17 
18     task_t* child = (task_t*) schedule_child();
19     if(child == NULL) {
20         errno = ECHILD;
21         return -1;
22     }
23 
24     int exitcode = schedule_wait(child);
25 
26     if(status)
27         *status = exitcode;
28 
29     return child->pid;
30 }
.fi
.SS "SYSCALL (\fBsys_wait\fP, 16)"

.SH "Variable Documentation"
.PP 
.SS "\fBtask_t\fP* current_task"

.PP
Current task address\&. 
.PP
Definition at line 35 of file sched\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
