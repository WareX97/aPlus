.TH "usr/src/libpthread/src/pthread_barrier.c" 3 "Sun Nov 16 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
usr/src/libpthread/src/pthread_barrier.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <sched\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include 'pthread_internal\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_barrier_init\fP (\fBpthread_barrier_t\fP *barrier, const \fBpthread_barrierattr_t\fP *attr, unsigned int count)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_barrier_destroy\fP (\fBpthread_barrier_t\fP *barrier)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_barrier_wait\fP (\fBpthread_barrier_t\fP *barrier)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBPUBLIC\fP int pthread_barrier_destroy (\fBpthread_barrier_t\fP *barrier)"

.PP
Definition at line 29 of file pthread_barrier\&.c\&.
.PP
References pthread_barrier::curr_height, errno, and pthread_barrier::init_height\&.
.PP
.nf
29                                                                {
30     if(barrier == NULL) {
31         errno = EINVAL;
32         return -1;
33     }
34 
35     barrier->curr_height = 0;
36     barrier->init_height = 0;
37     
38 
39     return 0;
40 }
.fi
.SS "\fBPUBLIC\fP int pthread_barrier_init (\fBpthread_barrier_t\fP *barrier, const \fBpthread_barrierattr_t\fP *attr, unsigned intcount)"

.PP
Definition at line 9 of file pthread_barrier\&.c\&.
.PP
References pthread_barrier::curr_height, errno, pthread_barrier::init_height, pthread_barrier::owner, and pthread_self()\&.
.PP
.nf
9                                                                                                                    {
10     if(barrier == NULL) {
11         errno = EINVAL;
12         return -1;
13     }
14 
15     if(count == 0) {
16         errno = EINVAL;
17         return -1;
18     }
19 
20     barrier->curr_height = 0;
21     barrier->init_height = count;
22     barrier->owner = pthread_self();
23     
24 
25     return 0;
26 }
.fi
.SS "\fBPUBLIC\fP int pthread_barrier_wait (\fBpthread_barrier_t\fP *barrier)"

.PP
Definition at line 43 of file pthread_barrier\&.c\&.
.PP
References pthread_barrier::curr_height, errno, pthread_barrier::init_height, pthread_barrier::owner, PTHREAD_BARRIER_SERIAL_THREAD, pthread_self(), and sched_yield()\&.
.PP
.nf
43                                                             {
44     if(barrier == NULL) {
45         errno = EINVAL;
46         return -1;
47     }
48 
49     barrier->curr_height += 1;
50 
51     while(barrier->curr_height < barrier->init_height)
52         sched_yield();
53 
54     if(pthread_self() == barrier->owner)
55         return PTHREAD_BARRIER_SERIAL_THREAD;
56 
57     return 0;
58 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
