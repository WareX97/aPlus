.TH "usr/src/libpthread/src/pthread_barrier.c" 3 "Wed Nov 12 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
usr/src/libpthread/src/pthread_barrier.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <sched\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include 'pthread_internal\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_barrier_init\fP (\fBpthread_barrier_t\fP *barrier, const \fBpthread_barrierattr_t\fP *attr, unsigned int count)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_barrier_destroy\fP (\fBpthread_barrier_t\fP *barrier)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_barrier_wait\fP (\fBpthread_barrier_t\fP *barrier)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBPUBLIC\fP int pthread_barrier_destroy (\fBpthread_barrier_t\fP *barrier)"

.PP
Definition at line 28 of file pthread_barrier\&.c\&.
.PP
References pthread_barrier::curr_height, errno, and pthread_barrier::init_height\&.
.PP
.nf
28                                                                {
29     if(barrier == NULL) {
30         errno = EINVAL;
31         return 1;
32     }
33 
34     barrier->curr_height = 0;
35     barrier->init_height = 0;
36     
37 
38     return 0;
39 }
.fi
.SS "\fBPUBLIC\fP int pthread_barrier_init (\fBpthread_barrier_t\fP *barrier, const \fBpthread_barrierattr_t\fP *attr, unsigned intcount)"

.PP
Definition at line 9 of file pthread_barrier\&.c\&.
.PP
References pthread_barrier::curr_height, errno, and pthread_barrier::init_height\&.
.PP
.nf
9                                                                                                                    {
10     if(barrier == NULL) {
11         errno = EINVAL;
12         return 1;
13     }
14 
15     if(count == 0) {
16         errno = EINVAL;
17         return 1;
18     }
19 
20     barrier->curr_height = 0;
21     barrier->init_height = count;
22     
23 
24     return 0;
25 }
.fi
.SS "\fBPUBLIC\fP int pthread_barrier_wait (\fBpthread_barrier_t\fP *barrier)"

.PP
Definition at line 42 of file pthread_barrier\&.c\&.
.PP
References pthread_barrier::curr_height, errno, pthread_barrier::init_height, and sched_yield()\&.
.PP
.nf
42                                                             {
43     if(barrier == NULL) {
44         errno = EINVAL;
45         return 1;
46     }
47 
48     barrier->curr_height += 1;
49 
50     while(barrier->curr_height < barrier->init_height)
51         sched_yield();
52 
53     return 0;
54 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
