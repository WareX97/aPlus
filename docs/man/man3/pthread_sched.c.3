.TH "usr/src/libpthread/src/pthread_sched.c" 3 "Dom 9 Nov 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
usr/src/libpthread/src/pthread_sched.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <sched\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include 'pthread_internal\&.h'\fP
.br

.SS "Funzioni"

.in +1c
.ti -1c
.RI "\fBEXTERN\fP int \fBsched_setparam\fP (pid_t pid, const struct sched_param *param)"
.br
.ti -1c
.RI "\fBEXTERN\fP int \fBsched_getparam\fP (pid_t pid, const struct sched_param *param)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_setschedparam\fP (\fBpthread_t\fP thread, int policy, const struct sched_param *param)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_getschedparam\fP (\fBpthread_t\fP thread, int *policy, struct sched_param *param)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_setconcurrency\fP (int level)"
.br
.ti -1c
.RI "\fBPUBLIC\fP int \fBpthread_getconcurrency\fP (void)"
.br
.in -1c
.SH "Documentazione delle funzioni"
.PP 
.SS "\fBPUBLIC\fP int pthread_getconcurrency (void)"

.PP
Definizione alla linea 57 del file pthread_sched\&.c\&.
.PP
Referenzia pthread_context::attr, errno, pthread_attr::param, e pthread_self()\&.
.PP
.nf
57                                         {
58     pthread_t thread = pthread_self();
59     if(!thread) {
60         errno = ESRCH;
61         return 1;
62     }
63 
64     pthread_context_t* ctx = (pthread_context_t*) thread;
65     return ctx->attr\&.param\&.sched_priority;
66 }
.fi
.SS "\fBPUBLIC\fP int pthread_getschedparam (\fBpthread_t\fPthread, int *policy, struct sched_param *param)"

.PP
Definizione alla linea 26 del file pthread_sched\&.c\&.
.PP
Referenzia errno, sched_getparam(), e pthread_context::tid\&.
.PP
.nf
26                                                                                            {
27     if(!thread) {
28         errno = EINVAL;
29         return 1;
30     }
31 
32     if(param == NULL) {
33         errno = EINVAL;
34         return 1;
35     }
36     
37     pthread_context_t* ctx = (pthread_context_t*) thread;
38     if((*policy = sched_getparam(ctx->tid, param)) != -1)
39         return 0;
40     
41     return 1;
42 }
.fi
.SS "\fBPUBLIC\fP int pthread_setconcurrency (intlevel)"

.PP
Definizione alla linea 44 del file pthread_sched\&.c\&.
.PP
Referenzia pthread_context::attr, errno, pthread_attr::param, e pthread_self()\&.
.PP
.nf
44                                              {
45     pthread_t thread = pthread_self();
46     if(!thread) {
47         errno = ESRCH;
48         return 1;
49     }
50 
51     pthread_context_t* ctx = (pthread_context_t*) thread;
52     ctx->attr\&.param\&.sched_priority = level;
53 
54     return 0;
55 }
.fi
.SS "\fBPUBLIC\fP int pthread_setschedparam (\fBpthread_t\fPthread, intpolicy, const struct sched_param *param)"

.PP
Definizione alla linea 11 del file pthread_sched\&.c\&.
.PP
Referenzia errno, sched_setparam(), e pthread_context::tid\&.
.PP
.nf
11                                                                                                 {
12     if(!thread) {
13         errno = EINVAL;
14         return 1;
15     }
16 
17     if(param == NULL) {
18         errno = EINVAL;
19         return 1;
20     }
21 
22     pthread_context_t* ctx = (pthread_context_t*) thread;
23     return sched_setparam(ctx->tid, param);
24 }
.fi
.SS "\fBEXTERN\fP int sched_getparam (pid_tpid, const struct sched_param *param)"

.SS "\fBEXTERN\fP int sched_setparam (pid_tpid, const struct sched_param *param)"

.PP
Definizione alla linea 35 del file sched\&.c\&.
.PP
Referenzia errno\&.
.PP
.nf
35                                                                {
36     if(param == NULL) {
37         errno = EINVAL;
38         return -1;
39     }
40 
41     if(pid < 0) {
42         errno = EINVAL;
43         return -1;
44     }
45 
46     errno = ENOSYS;
47     return -1;
48 }
.fi
.SH "Autore"
.PP 
Generato automaticamente da Doxygen per aPlus a partire dal codice sorgente\&.
