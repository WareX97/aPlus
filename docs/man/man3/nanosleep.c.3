.TH "usr/src/libposix/src/nanosleep.c" 3 "Fri Nov 14 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
usr/src/libposix/src/nanosleep.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <sys/times\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <sched\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsched_yield\fP (void)"
.br
.ti -1c
.RI "int \fBnanosleep\fP (const struct timespec *req, struct timespec *rem)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int nanosleep (const struct timespec *req, struct timespec *rem)"

.PP
Definition at line 10 of file nanosleep\&.c\&.
.PP
References errno, and sched_yield()\&.
.PP
.nf
10                                                                 {
11     if(req->tv_sec > 999999999) {
12         errno = EINVAL;
13         return -1;
14     }
15 
16     struct timeval* tm = malloc(sizeof(struct timeval));
17     struct timezone* tz = malloc(sizeof(struct timezone));
18 
19     if(!tm && !tz) {
20         errno = ENOMEM;
21         return -1;
22     }
23 
24     if(gettimeofday(tm, tz) != 0)
25             return -1;
26 
27     int t0 = req->tv_sec + tm->tv_sec;
28     int t1 = req->tv_nsec + tm->tv_usec;
29 
30 
31     while(1) {
32         if(gettimeofday(tm, tz) != 0)
33             return -1;
34 
35         if(tm->tv_sec > t0 && tm->tv_usec > t1)
36             break;
37 
38         if(rem) {
39             rem->tv_sec = t0 - tm->tv_sec;
40             rem->tv_nsec = t1 - tm->tv_usec;
41         }
42 
43         sched_yield();
44     }
45 
46 
47     free(tm);
48     free(tz);
49 
50     return 0;
51 }
.fi
.SS "int sched_yield (void)"

.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
