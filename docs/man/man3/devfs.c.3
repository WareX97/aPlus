.TH "src/fs/devfs.c" 3 "Sun Nov 9 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/fs/devfs.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <dirent\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBinode_t\fP * \fBdevfs_getdevice\fP (dev_t dev)"
.br
.ti -1c
.RI "struct \fBinode\fP * \fBdevfs_creat\fP (struct \fBinode\fP *\fBinode\fP, char *\fBname\fP, mode_t mode)"
.br
.ti -1c
.RI "\fBinode_t\fP * \fBdevfs_mount\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBinode_t\fP * \fBvfs_root\fP"
.br
.ti -1c
.RI "\fBtask_t\fP * \fBcurrent_task\fP"
.br
.RI "\fICurrent task address\&. \fP"
.ti -1c
.RI "\fBinode_t\fP * \fBdevfs\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "struct \fBinode\fP* devfs_creat (struct \fBinode\fP *inode, char *name, mode_tmode)"

.PP
Definition at line 35 of file devfs\&.c\&.
.PP
References inode::atime, inode::chown, inode::creat, inode::ctime, inode::dev, inode::finddir, inode::flush, inode::gid, task::gid, inode::ino, inode::ioctl, kmalloc(), inode::link, inode::mode, inode::mtime, inode::name, inode::nlink, inode::parent, inode::rdev, inode::read, inode::readdir, inode::rename, inode::size, sys_time(), inode::uid, task::uid, inode::unlink, vfs_map(), vfs_mapped(), and inode::write\&.
.PP
.nf
35                                                                          {
36     if((void*) vfs_mapped(inode, name) != NULL)
37         return NULL;
38         
39     inode_t* ino = (inode_t*) kmalloc(sizeof(inode_t));
40     strcpy(ino->name, name);
41     
42     ino->dev = inode->dev;
43     ino->ino = 0;
44     ino->mode = mode;
45     ino->nlink = 0;
46     ino->uid = current_task->uid;
47     ino->gid = current_task->gid;
48     ino->rdev = ino->rdev;
49     ino->size = (size_t) 0;
50     ino->atime = ino->ctime = ino->mtime = sys_time(NULL);
51     ino->parent = inode;
52     ino->link = NULL;
53     
54     ino->read = NULL;
55     ino->write = NULL;
56     ino->readdir = NULL;
57     ino->finddir = NULL;
58     ino->creat = NULL;
59     ino->rename = NULL;
60     ino->unlink = NULL;
61     ino->chown = NULL;
62     ino->flush = NULL;
63     ino->ioctl = NULL;
64     
65     vfs_map(ino);
66     
67     return ino;
68 }
.fi
.SS "\fBinode_t\fP* devfs_getdevice (dev_tdev)"

.PP
Definition at line 23 of file devfs\&.c\&.
.PP
References inode::ino, and vfs_mapped_at_index()\&.
.PP
.nf
23                                     {
24     int index = 0;
25     inode_t* map = NULL;
26 
27     while((map = (inode_t*) vfs_mapped_at_index(devfs, index++)) != NULL)
28         if(map->ino == dev)
29             return map;
30     
31     return NULL;
32 }
.fi
.SS "\fBinode_t\fP* devfs_mount ()"

.PP
Definition at line 71 of file devfs\&.c\&.
.PP
References inode::atime, inode::chown, inode::creat, inode::ctime, inode::dev, devfs, devfs_creat(), inode::finddir, inode::flush, inode::gid, GID_ROOT, inode::ino, inode::ioctl, kmalloc(), inode::link, inode::mode, inode::mtime, inode::name, inode::nlink, inode::parent, inode::rdev, inode::read, inode::readdir, inode::rename, inode::size, sys_time(), inode::uid, UID_ROOT, inode::unlink, vfs_root, and inode::write\&.
.PP
.nf
71                        {
72     
73     devfs = (inode_t*) kmalloc(sizeof(inode_t));
74     strcpy(devfs->name, "dev");
75     
76     devfs->dev = (dev_t) 0;
77     devfs->ino = (ino_t) 0;
78     devfs->mode = S_IFDIR;
79     devfs->nlink = 0;
80     devfs->uid = UID_ROOT;
81     devfs->gid = GID_ROOT;
82     devfs->rdev = (dev_t) 0;
83     devfs->size = (size_t) 0;
84     devfs->atime = devfs->ctime = devfs->mtime = sys_time(NULL);
85     devfs->parent = vfs_root;
86     devfs->link = NULL;
87     
88     devfs->read = NULL;
89     devfs->write = NULL;
90     devfs->readdir = NULL;
91     devfs->finddir = NULL;
92     devfs->creat = devfs_creat;
93     devfs->rename = NULL;
94     devfs->unlink = NULL;
95     devfs->chown = NULL;
96     devfs->flush = NULL;
97     devfs->ioctl = NULL;
98     
99     return devfs;
100 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBtask_t\fP* current_task"

.PP
Current task address\&. 
.PP
Definition at line 35 of file sched\&.c\&.
.SS "\fBinode_t\fP* devfs"

.PP
Definition at line 20 of file devfs\&.c\&.
.SS "\fBinode_t\fP* vfs_root"

.PP
Definition at line 19 of file vfs\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
