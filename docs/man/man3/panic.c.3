.TH "src/panic.c" 3 "Fri Nov 14 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/panic.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br
\fC#include <aplus/fs\&.h>\fP
.br
\fC#include <aplus/list\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBd\fP(reg)"
.br
.ti -1c
.RI "#define \fB_d\fP()"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBdump_errno\fP ()"
.br
.RI "\fIPrint last error number\&. \fP"
.ti -1c
.RI "static void \fBdump_registers\fP ()"
.br
.RI "\fIPrint current registers\&. \fP"
.ti -1c
.RI "static void \fBdump_stacktrace\fP (int count)"
.br
.ti -1c
.RI "static void \fBdump_task\fP ()"
.br
.RI "\fIPrint all and current task\&. \fP"
.ti -1c
.RI "void \fBpanic\fP (char *msg)"
.br
.RI "\fIGo in Kernel Panic, halt system\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBlist_t\fP * \fBtask_queue\fP"
.br
.RI "\fIList of all Task\&. \fP"
.ti -1c
.RI "\fBtask_t\fP * \fBcurrent_task\fP"
.br
.RI "\fICurrent task address\&. \fP"
.ti -1c
.RI "\fBtask_t\fP * \fBkernel_task\fP"
.br
.RI "\fIKernel task address\&. \fP"
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define _d()"
\fBValue:\fP
.PP
.nf
;                                \\
		kprintf("\n");
.fi
.SS "#define d(reg)"
\fBValue:\fP
.PP
.nf
;                             \\
		kprintf(#reg ": 0x%x\t\t", read_##reg());
.fi
.SH "Function Documentation"
.PP 
.SS "static void dump_errno ()\fC [static]\fP"

.PP
Print last error number\&. 
.PP
Definition at line 16 of file panic\&.c\&.
.PP
References errno, and kprintf()\&.
.PP
.nf
16                          {
17     kprintf("errno: %d - %s\n", errno, strerror(errno));
18 }
.fi
.SS "static void dump_registers ()\fC [static]\fP"

.PP
Print current registers\&. 
.PP
Definition at line 24 of file panic\&.c\&.
.PP
References _d, cs, d, ds, eax, ebp, ebx, ecx, edi, edx, eflags, eip, es, esi, esp, fs, gs, and kprintf()\&.
.PP
.nf
24                              {
25 
26     kprintf("Registers:\n");
27 
28     #define d(reg);                             \
29         kprintf(#reg ": 0x%x\t\t", read_##reg());
30         
31     #define _d();                               \
32         kprintf("\n");  
33             
34     d(eax);
35     d(ebx);
36     d(ecx);
37     d(edx);
38     d(esi);
39     d(edi);
40     _d();
41     d(eip);
42     d(eflags);
43     d(esp);
44     d(ebp);
45     _d();
46     d(cs);
47     d(ds);
48     d(es);
49     d(fs);
50     d(gs);
51     _d();
52     d(cr0);
53     d(cr2);
54     d(cr3);
55     d(cr4);
56     _d();
57     _d();
58     
59     #undef d
60     #undef _d
61 }
.fi
.SS "static void dump_stacktrace (intcount)\fC [static]\fP"
Print a stacktrace\&. 
.PP
Definition at line 67 of file panic\&.c\&.
.PP
References kprintf()\&.
.PP
.nf
67                                        {
68     kprintf("Stack trace:\n");
69     kprintf("TODO\n\n");
70 }
.fi
.SS "static void dump_task ()\fC [static]\fP"

.PP
Print all and current task\&. 
.PP
Definition at line 76 of file panic\&.c\&.
.PP
References task::exe, kprintf(), list_foreach, inode::name, task::pid, and value\&.
.PP
.nf
76                         {
77     kprintf("Task:\n");
78     
79     list_foreach(value, task_queue) {
80         task_t* task = (task_t*) value;
81         kprintf(" # %d: ", task->pid);
82         
83         if(task->exe)
84             kprintf("%s ", task->exe->name);
85         else
86             kprintf("unknown ");
87             
88         if(task == current_task)
89             kprintf("(current) ");
90             
91         if(task == kernel_task)
92             kprintf("(kernel) ");
93             
94         kprintf("\n\n");
95     }
96 }
.fi
.SS "void panic (char *msg)"

.PP
Go in Kernel Panic, halt system\&. 
.PP
Definition at line 102 of file panic\&.c\&.
.PP
References __asm__(), dump_errno(), dump_registers(), dump_stacktrace(), dump_task(), and kprintf()\&.
.PP
.nf
102                       {
103     __asm__ ("cli");
104     kprintf("panic: \"%s\"\n", msg);
105     
106     
107     dump_registers();
108     dump_stacktrace(6);
109     dump_task();
110     dump_errno();
111     
112     for(;;);
113 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBtask_t\fP* current_task"

.PP
Current task address\&. 
.PP
Definition at line 35 of file sched\&.c\&.
.SS "\fBtask_t\fP* kernel_task"

.PP
Kernel task address\&. 
.PP
Definition at line 40 of file sched\&.c\&.
.SS "\fBlist_t\fP* task_queue"

.PP
List of all Task\&. 
.PP
Definition at line 46 of file sched\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
