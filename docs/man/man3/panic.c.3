.TH "src/panic.c" 3 "Dom 9 Nov 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/panic.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br
\fC#include <aplus/fs\&.h>\fP
.br
\fC#include <aplus/list\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Definizioni"

.in +1c
.ti -1c
.RI "#define \fBd\fP(reg)"
.br
.ti -1c
.RI "#define \fB_d\fP()"
.br
.in -1c
.SS "Funzioni"

.in +1c
.ti -1c
.RI "static void \fBdump_errno\fP ()"
.br
.ti -1c
.RI "static void \fBdump_registers\fP ()"
.br
.ti -1c
.RI "static void \fBdump_stacktrace\fP (int count)"
.br
.ti -1c
.RI "static void \fBdump_task\fP ()"
.br
.ti -1c
.RI "void \fBpanic\fP (char *msg)"
.br
.in -1c
.SS "Variabili"

.in +1c
.ti -1c
.RI "\fBlist_t\fP * \fBtask_queue\fP"
.br
.ti -1c
.RI "\fBtask_t\fP * \fBcurrent_task\fP"
.br
.ti -1c
.RI "\fBtask_t\fP * \fBkernel_task\fP"
.br
.in -1c
.SH "Documentazione delle definizioni"
.PP 
.SS "#define _d()"
\fBValore:\fP
.PP
.nf
;                                \\
		kprintf("\n");
.fi
.SS "#define d(reg)"
\fBValore:\fP
.PP
.nf
;                             \\
		kprintf(#reg ": 0x%x\t\t", read_##reg());
.fi
.SH "Documentazione delle funzioni"
.PP 
.SS "static void dump_errno ()\fC [static]\fP"

.PP
Definizione alla linea 13 del file panic\&.c\&.
.PP
Referenzia errno, e kprintf\&.
.PP
.nf
13                          {
14     kprintf("errno: %d - %s\n", errno, strerror(errno));
15 }
.fi
.SS "static void dump_registers ()\fC [static]\fP"

.PP
Definizione alla linea 17 del file panic\&.c\&.
.PP
Referenzia _d, cs, d, ds, eax, ebp, ebx, ecx, edi, edx, eflags, eip, es, esi, esp, gs, e kprintf\&.
.PP
.nf
17                              {
18 
19     kprintf("Registers:\n");
20 
21     #define d(reg);                             \
22         kprintf(#reg ": 0x%x\t\t", read_##reg());
23         
24     #define _d();                               \
25         kprintf("\n");  
26             
27     d(eax);
28     d(ebx);
29     d(ecx);
30     d(edx);
31     d(esi);
32     d(edi);
33     _d();
34     d(eip);
35     d(eflags);
36     d(esp);
37     d(ebp);
38     _d();
39     d(cs);
40     d(ds);
41     d(es);
42     d(fs);
43     d(gs);
44     _d();
45     d(cr0);
46     d(cr2);
47     d(cr3);
48     d(cr4);
49     _d();
50     _d();
51     
52     #undef d
53     #undef _d
54 }
.fi
.SS "static void dump_stacktrace (intcount)\fC [static]\fP"

.PP
Definizione alla linea 57 del file panic\&.c\&.
.PP
Referenzia kprintf\&.
.PP
.nf
57                                        {
58     kprintf("Stack trace:\n");
59     kprintf("TODO\n\n");
60 }
.fi
.SS "static void dump_task ()\fC [static]\fP"

.PP
Definizione alla linea 62 del file panic\&.c\&.
.PP
Referenzia task::exe, kprintf, list_foreach, inode::name, task::pid, e value\&.
.PP
.nf
62                         {
63     kprintf("Task:\n");
64     
65     list_foreach(value, task_queue) {
66         task_t* task = (task_t*) value;
67         kprintf(" # %d: ", task->pid);
68         
69         if(task->exe)
70             kprintf("%s ", task->exe->name);
71         else
72             kprintf("unknown ");
73             
74         if(task == current_task)
75             kprintf("(current) ");
76             
77         if(task == kernel_task)
78             kprintf("(kernel) ");
79             
80         kprintf("\n\n");
81     }
82 }
.fi
.SS "void panic (char *msg)"

.PP
Definizione alla linea 84 del file panic\&.c\&.
.PP
Referenzia __asm__(), dump_errno(), dump_registers(), dump_stacktrace(), dump_task(), e kprintf\&.
.PP
.nf
84                       {
85     __asm__ ("cli");
86     kprintf("panic: \"%s\"\n", msg);
87     
88     
89     dump_registers();
90     dump_stacktrace(6);
91     dump_task();
92     dump_errno();
93     
94     for(;;);
95 }
.fi
.SH "Documentazione delle variabili"
.PP 
.SS "\fBtask_t\fP* current_task"

.PP
Definizione alla linea 33 del file sched\&.c\&.
.SS "\fBtask_t\fP* kernel_task"

.PP
Definizione alla linea 34 del file sched\&.c\&.
.SS "\fBlist_t\fP* task_queue"

.PP
Definizione alla linea 36 del file sched\&.c\&.
.SH "Autore"
.PP 
Generato automaticamente da Doxygen per aPlus a partire dal codice sorgente\&.
