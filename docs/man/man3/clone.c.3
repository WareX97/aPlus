.TH "src/syscall/clone.c" 3 "Wed Nov 12 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/syscall/clone.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/syscall\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsys_clone\fP (int(*fn)(void *), void *child_stack, int \fBflags\fP, void *arg)"
.br
.RI "\fICreates a new process\&.
.br
Unlike fork(2), these calls allow the child process to share parts of its execution context with the calling process, such as the memory space, the table of file descriptors, and the table of signal handlers\&.
.br
The main use of \fBsys_clone()\fP is to implement threads: multiple threads of control in a program that run concurrently in a shared memory space\&. \fP"
.ti -1c
.RI "\fBSYSCALL\fP (\fBsys_clone\fP, 22)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBtask_t\fP * \fBcurrent_task\fP"
.br
.RI "\fICurrent task address\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "int sys_clone (int(*)(void *)fn, void *child_stack, intflags, void *arg)"

.PP
Creates a new process\&.
.br
Unlike fork(2), these calls allow the child process to share parts of its execution context with the calling process, such as the memory space, the table of file descriptors, and the table of signal handlers\&.
.br
The main use of \fBsys_clone()\fP is to implement threads: multiple threads of control in a program that run concurrently in a shared memory space\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfn\fP Is a pointer to a function that is called by the child process at the beginning of its execution\&. 
.br
\fIchild_stack\fP specifies the location of the stack used by the child process\&.
.br
 Since the child and calling process may share memory, it is not possible for the child process to execute in the same stack as the calling process\&. 
.br
\fIflags\fP 
.br
.IP "\(bu" 2
CLONE_FILES
.br
 The calling process and the child process share the same file descriptor table\&.
.IP "\(bu" 2
CLONE_SIGHAND
.br
 The calling process and the child process share the same table of signal handlers\&.
.IP "\(bu" 2
\fBCLONE_VM\fP
.br
 The calling process and the child process run in the same memory space\&. 
.PP
.br
\fIarg\fP Argument is passed to the fn function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
On success, the thread ID of the child process is returned in the caller's thread of execution\&.
.br
 On failure, -1 is returned in the caller's context, no child process will be created, and errno will be set appropriately\&. 
.RE
.PP

.PP
Definition at line 32 of file clone\&.c\&.
.PP
References errno, task::pid, and task_clone()\&.
.PP
.nf
32                                                                          {
33     if(!current_task)
34         return -1;
35     
36     if(fn == NULL) {
37         errno = EINVAL;
38         return -1;
39     }
40 
41 
42     task_t* child = (task_t*) task_clone(fn, arg, child_stack, flags);
43     if(!child) {
44         errno = EFAULT;
45         return -1;
46     }
47 
48     return child->pid;
49 }
.fi
.SS "SYSCALL (\fBsys_clone\fP, 22)"

.SH "Variable Documentation"
.PP 
.SS "\fBtask_t\fP* current_task"

.PP
Current task address\&. 
.PP
Definition at line 35 of file sched\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
