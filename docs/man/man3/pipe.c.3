.TH "src/syscall/pipe.c" 3 "Sun Nov 16 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/syscall/pipe.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <aplus\&.h>\fP
.br
\fC#include <aplus/syscall\&.h>\fP
.br
\fC#include <aplus/fs\&.h>\fP
.br
\fC#include <aplus/task\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <dirent\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsys_pipe\fP (int fd[2])"
.br
.ti -1c
.RI "\fBSYSCALL\fP (\fBsys_pipe\fP, 30)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBtask_t\fP * \fBcurrent_task\fP"
.br
.RI "\fICurrent task address\&. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "int sys_pipe (intfd[2])"

.PP
Definition at line 15 of file pipe\&.c\&.
.PP
References errno, kmalloc(), pipe_create(), and schedule_append_fd()\&.
.PP
.nf
15                         {
16     if(!fd) {
17         errno = EINVAL;
18         return -1;
19     }
20 
21     inode_t* nd = (inode_t*) kmalloc(sizeof(inode_t) * 2);
22     memset(nd, 0, sizeof(inode_t) * 2);
23 
24     if(pipe_create(nd) != 0)
25         return -1;
26 
27     fd[0] = schedule_append_fd(current_task, &nd[0]);
28     fd[1] = schedule_append_fd(current_task, &nd[1]);
29 
30     return 0;
31 }
.fi
.SS "SYSCALL (\fBsys_pipe\fP, 30)"

.SH "Variable Documentation"
.PP 
.SS "\fBtask_t\fP* current_task"

.PP
Current task address\&. 
.PP
Definition at line 37 of file sched\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
