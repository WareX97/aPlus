.TH "src/mm/kheap.c" 3 "Sun Nov 16 2014" "Version 0.1" "aPlus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/mm/kheap.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <aplus/mm\&.h>\fP
.br
\fC#include <grub\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBITMAP_SET\fP(bmp, bit)   bmp[bit / 32] |= (1 << (bit % 32))"
.br
.ti -1c
.RI "#define \fBBITMAP_CLR\fP(bmp, bit)   bmp[bit / 32] &= ~(1 << (bit % 32))"
.br
.ti -1c
.RI "#define \fBBITMAP_TST\fP(bmp, bit)   (bmp[bit / 32] & (1 << (bit % 32)))"
.br
.ti -1c
.RI "#define \fBGETBIT\fP(addr)   ((\fBuint32_t\fP) addr / \fBBLKSIZE\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static int \fBbitmap_first\fP (\fBheap_t\fP *\fBheap\fP, size_t \fBsize\fP)"
.br
.ti -1c
.RI "void * \fBbitmap_alloc\fP (\fBheap_t\fP *\fBheap\fP, size_t \fBsize\fP)"
.br
.ti -1c
.RI "void \fBbitmap_free\fP (\fBheap_t\fP *\fBheap\fP, void *addr, size_t \fBsize\fP)"
.br
.ti -1c
.RI "int \fBkheap_init\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static \fBheap_t\fP \fBkheap\fP"
.br
.ti -1c
.RI "\fBuint32_t\fP \fBmemsize\fP"
.br
.ti -1c
.RI "static \fBuint8_t\fP \fB__bitmap\fP [131072]"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BITMAP_CLR(bmp, bit)   bmp[bit / 32] &= ~(1 << (bit % 32))"

.PP
Definition at line 34 of file kheap\&.c\&.
.SS "#define BITMAP_SET(bmp, bit)   bmp[bit / 32] |= (1 << (bit % 32))"

.PP
Definition at line 31 of file kheap\&.c\&.
.SS "#define BITMAP_TST(bmp, bit)   (bmp[bit / 32] & (1 << (bit % 32)))"

.PP
Definition at line 37 of file kheap\&.c\&.
.SS "#define GETBIT(addr)   ((\fBuint32_t\fP) addr / \fBBLKSIZE\fP)"

.PP
Definition at line 41 of file kheap\&.c\&.
.SH "Function Documentation"
.PP 
.SS "void* bitmap_alloc (\fBheap_t\fP *heap, size_tsize)"

.PP
Definition at line 77 of file kheap\&.c\&.
.PP
References heap::bitmap, bitmap_first(), BITMAP_SET, BLKSIZE, heap::size, size, and heap::used\&.
.PP
.nf
77                                               {
78     if(!heap)
79         return 0;
80         
81     if(!heap->bitmap)
82         return 0;
83         
84     if(heap->used >= heap->size)
85         return 0;
86 
87     if(!size)
88         return 0;
89         
90     
91     
92     size /= BLKSIZE;
93     size += 1;
94     
95 
96     int index = bitmap_first(heap, size);
97     if(index == -1)
98         return 0;
99                 
100     for(int i = 0; i < size; i++)
101         BITMAP_SET(heap->bitmap, (index + i));
102     
103     
104     heap->used += (size * BLKSIZE);
105     
106     return (void*) (index * BLKSIZE);
107 }
.fi
.SS "static int bitmap_first (\fBheap_t\fP *heap, size_tsize)\fC [static]\fP"

.PP
Definition at line 54 of file kheap\&.c\&.
.PP
References heap::bitmap, BITMAP_TST, BLKSIZE, heap::size, and size\&.
.PP
.nf
54                                                    {
55     if(size == 0)
56         return -1;
57         
58 
59     int hsize = heap->size / BLKSIZE;
60 
61     for(int i = 0; i < hsize; i++) {    
62         for(int j = 0, f = 0; j < size; j++) {
63             if(BITMAP_TST(heap->bitmap, (i + j)))
64                 continue;
65             
66             f++;    
67             if(f == size)
68                 return i;
69         }
70     }
71     
72     return -1;
73 }
.fi
.SS "void bitmap_free (\fBheap_t\fP *heap, void *addr, size_tsize)"

.PP
Definition at line 109 of file kheap\&.c\&.
.PP
References heap::bitmap, BITMAP_CLR, BLKSIZE, GETBIT, size, and heap::used\&.
.PP
.nf
109                                                         {
110     if(!heap)
111         return;
112         
113     if(!heap->bitmap)
114         return;
115         
116 
117     if(size % BLKSIZE) {
118         size /= BLKSIZE;
119         size += 1;
120     }else {
121         size /= BLKSIZE;
122     }
123     
124     int index = GETBIT(addr);
125     for(int i = 0; i < size; i++)
126         BITMAP_CLR(heap->bitmap, (index + i));
127         
128         
129     heap->used -= (size * BLKSIZE);
130 }
.fi
.SS "int kheap_init ()"

.PP
Definition at line 134 of file kheap\&.c\&.
.PP
References __bitmap, heap::alloc, heap::bitmap, bitmap_alloc(), bitmap_free(), BLKSIZE, heap::free, halloc(), memsize, mm_setheap(), heap::size, and uint32_t\&.
.PP
.nf
134                  {
135 
136     kheap\&.bitmap = (uint32_t*) __bitmap;
137     kheap\&.size = memsize;
138     kheap\&.alloc = bitmap_alloc;
139     kheap\&.free = bitmap_free;
140     
141     memset(kheap\&.bitmap, 0, (kheap\&.size / BLKSIZE));
142     
143     mm_setheap(&kheap);
144     
145     // Alloc first 4MB (reserved physical kernel area)
146     halloc(&kheap, (size_t) 0x400000);
147     
148 
149     return 0;
150 }
.fi
.SH "Variable Documentation"
.PP 
.SS "\fBuint8_t\fP __bitmap[131072]\fC [static]\fP"

.PP
Definition at line 51 of file kheap\&.c\&.
.SS "\fBheap_t\fP kheap\fC [static]\fP"

.PP
Definition at line 47 of file kheap\&.c\&.
.SS "\fBuint32_t\fP memsize"

.PP
\fBSee also:\fP
.RS 4
\fBaplus/mm\&.h\fP 
.RE
.PP

.PP
Definition at line 44 of file mm\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for aPlus from the source code\&.
