<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="spinlock_8c" kind="file">
    <compoundname>spinlock.c</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="spinlock_8h" local="no">aplus/spinlock.h</includes>
    <includes refid="list_8h" local="no">aplus/list.h</includes>
    <incdepgraph>
      <node id="1354">
        <label>src/spinlock.c</label>
        <link refid="spinlock.c"/>
        <childnode refid="1355" relation="include">
        </childnode>
        <childnode refid="1356" relation="include">
        </childnode>
        <childnode refid="1357" relation="include">
        </childnode>
      </node>
      <node id="1355">
        <label>stdint.h</label>
      </node>
      <node id="1358">
        <label>stddef.h</label>
      </node>
      <node id="1357">
        <label>aplus/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="1358" relation="include">
        </childnode>
        <childnode refid="1355" relation="include">
        </childnode>
        <childnode refid="1359" relation="include">
        </childnode>
      </node>
      <node id="1359">
        <label>sys/types.h</label>
      </node>
      <node id="1356">
        <label>aplus/spinlock.h</label>
        <link refid="spinlock_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="spinlock_8c_1ab01e311f21f78fc3c2bd0bdf74ef85c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spinlock_lock</definition>
        <argsstring>(spinlock_t *spin)</argsstring>
        <name>spinlock_lock</name>
        <param>
          <type><ref refid="spinlock_8h_1a7d562148dafb0dacf0ee876d482ed090" kindref="member">spinlock_t</ref> *</type>
          <declname>spin</declname>
        </param>
        <briefdescription>
<para>Acquire a spinlock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Spinlock address. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/spinlock.c" line="31" column="1" bodyfile="/opt/prj/aPlus/src/spinlock.c" bodystart="31" bodyend="38"/>
        <references refid="spinlock_8h_1a34b538b8c053bec1d149f9a4258aca89" compoundref="spinlock_8h" startline="51">fastlock_waiton</references>
        <references refid="spinlock_8h_1acf8c39cdbeaaab5ea8c011c77d5bca8b" compoundref="spinlock_8h" startline="27">SPINLOCK_FLAGS_FASTLOCK</references>
        <references refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" compoundref="spinlock_8h" startline="26">SPINLOCK_FLAGS_LOCKED</references>
        <references refid="spinlock_8h_1a9fd2288887ae3bf29520677b29e010a3" compoundref="spinlock_8h" startline="47">spinlock_waiton</references>
      </memberdef>
      <memberdef kind="function" id="spinlock_8c_1a4ca6e661fa1b704d39d834ac7341b360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void spinlock_unlock</definition>
        <argsstring>(spinlock_t *spin)</argsstring>
        <name>spinlock_unlock</name>
        <param>
          <type><ref refid="spinlock_8h_1a7d562148dafb0dacf0ee876d482ed090" kindref="member">spinlock_t</ref> *</type>
          <declname>spin</declname>
        </param>
        <briefdescription>
<para>Unlock a spinlock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Spinlock address. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/spinlock.c" line="45" column="1" bodyfile="/opt/prj/aPlus/src/spinlock.c" bodystart="45" bodyend="47"/>
        <references refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" compoundref="spinlock_8h" startline="26">SPINLOCK_FLAGS_LOCKED</references>
      </memberdef>
      <memberdef kind="function" id="spinlock_8c_1aef8280bb43eb7eecb8a7903f70af1906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int spinlock_trylock</definition>
        <argsstring>(spinlock_t *spin)</argsstring>
        <name>spinlock_trylock</name>
        <param>
          <type><ref refid="spinlock_8h_1a7d562148dafb0dacf0ee876d482ed090" kindref="member">spinlock_t</ref> *</type>
          <declname>spin</declname>
        </param>
        <briefdescription>
<para>Try to acquire a spinlock. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spin</parametername>
</parameternamelist>
<parameterdescription>
<para>Spinlock address. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 for success else -1. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/spinlock.c" line="55" column="1" bodyfile="/opt/prj/aPlus/src/spinlock.c" bodystart="55" bodyend="61"/>
        <references refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" compoundref="spinlock_8h" startline="26">SPINLOCK_FLAGS_LOCKED</references>
      </memberdef>
      <memberdef kind="function" id="spinlock_8c_1aa40e1417e8410d92c2ffc313e57560e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __spinlock_waiton</definition>
        <argsstring>()</argsstring>
        <name>__spinlock_waiton</name>
        <briefdescription>
<para>Yield current task if a false condition was given by <ref refid="spinlock_8h_1a9fd2288887ae3bf29520677b29e010a3" kindref="member">spinlock_waiton()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="spinlock_8h_1a9fd2288887ae3bf29520677b29e010a3" kindref="member">spinlock_waiton</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/spinlock.c" line="68" column="1" bodyfile="/opt/prj/aPlus/src/spinlock.c" bodystart="68" bodyend="70"/>
        <references refid="src_2sched_8c_1a4002881c26790c4390e314ce0e1ef1e8" compoundref="src_2sched_8c" startline="177" endline="185">schedule_yield</references>
      </memberdef>
      <memberdef kind="function" id="spinlock_8c_1a2bf717efcda7e5189e3192e09e49c249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __fastlock_waiton</definition>
        <argsstring>()</argsstring>
        <name>__fastlock_waiton</name>
        <briefdescription>
<para>Put CPU in pause for a while if a false condition was given by <ref refid="spinlock_8h_1a34b538b8c053bec1d149f9a4258aca89" kindref="member">fastlock_waiton()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="spinlock_8h_1a34b538b8c053bec1d149f9a4258aca89" kindref="member">fastlock_waiton</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/spinlock.c" line="76" column="1" bodyfile="/opt/prj/aPlus/src/spinlock.c" bodystart="76" bodyend="78"/>
        <references refid="desc_8c_1ad365b1ba0a341f9a84551327fe0dac7b">__asm__</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>spinlock.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Author:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Antonio<sp/>Natale<sp/>&lt;inferdevil97@gmail.com&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2014<sp/>WareX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="spinlock_8h" kindref="compound">aplus/spinlock.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="list_8h" kindref="compound">aplus/list.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="spinlock_8c_1ab01e311f21f78fc3c2bd0bdf74ef85c4" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spinlock_8c_1ab01e311f21f78fc3c2bd0bdf74ef85c4" kindref="member">spinlock_lock</ref>(<ref refid="spinlock_8h_1a7d562148dafb0dacf0ee876d482ed090" kindref="member">spinlock_t</ref>*<sp/>spin)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*spin<sp/>&amp;<sp/><ref refid="spinlock_8h_1acf8c39cdbeaaab5ea8c011c77d5bca8b" kindref="member">SPINLOCK_FLAGS_FASTLOCK</ref>)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spinlock_8h_1a9fd2288887ae3bf29520677b29e010a3" kindref="member">spinlock_waiton</ref>(*spin<sp/>&amp;<sp/><ref refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" kindref="member">SPINLOCK_FLAGS_LOCKED</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spinlock_8h_1a34b538b8c053bec1d149f9a4258aca89" kindref="member">fastlock_waiton</ref>(*spin<sp/>&amp;<sp/>SPINLOCK_FLAGS_LOCKED);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>*spin<sp/>|=<sp/><ref refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" kindref="member">SPINLOCK_FLAGS_LOCKED</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="spinlock_8c_1a4ca6e661fa1b704d39d834ac7341b360" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spinlock_8c_1a4ca6e661fa1b704d39d834ac7341b360" kindref="member">spinlock_unlock</ref>(<ref refid="spinlock_8h_1a7d562148dafb0dacf0ee876d482ed090" kindref="member">spinlock_t</ref>*<sp/>spin)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>*spin<sp/>&amp;=<sp/>~<ref refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" kindref="member">SPINLOCK_FLAGS_LOCKED</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="spinlock_8c_1aef8280bb43eb7eecb8a7903f70af1906" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="spinlock_8c_1aef8280bb43eb7eecb8a7903f70af1906" kindref="member">spinlock_trylock</ref>(<ref refid="spinlock_8h_1a7d562148dafb0dacf0ee876d482ed090" kindref="member">spinlock_t</ref>*<sp/>spin)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*spin<sp/>&amp;<sp/><ref refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" kindref="member">SPINLOCK_FLAGS_LOCKED</ref>)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>*spin<sp/>|=<sp/><ref refid="spinlock_8h_1aad28f3f1b6783cd56871b611ca2bcd97" kindref="member">SPINLOCK_FLAGS_LOCKED</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="spinlock_8c_1aa40e1417e8410d92c2ffc313e57560e8" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spinlock_8c_1aa40e1417e8410d92c2ffc313e57560e8" kindref="member">__spinlock_waiton</ref>()<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="src_2sched_8c_1a4002881c26790c4390e314ce0e1ef1e8" kindref="member">schedule_yield</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="spinlock_8c_1a2bf717efcda7e5189e3192e09e49c249" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="spinlock_8c_1a2bf717efcda7e5189e3192e09e49c249" kindref="member">__fastlock_waiton</ref>()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="desc_8c_1ad365b1ba0a341f9a84551327fe0dac7b" kindref="member">__asm__</ref><sp/>__volatile__(</highlight><highlight class="stringliteral">&quot;pause&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/opt/prj/aPlus/src/spinlock.c"/>
  </compounddef>
</doxygen>
