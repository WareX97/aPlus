<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="fs_8c" kind="file">
    <compoundname>fs.c</compoundname>
    <includes refid="aplus_8h" local="no">aplus.h</includes>
    <includes refid="fs_8h" local="no">aplus/fs.h</includes>
    <includes refid="mm_8h" local="no">aplus/mm.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes refid="dirent_8h" local="no">dirent.h</includes>
    <includes local="no">errno.h</includes>
    <incdepgraph>
      <node id="168">
        <label>sys/stat.h</label>
      </node>
      <node id="163">
        <label>stdarg.h</label>
      </node>
      <node id="165">
        <label>aplus/fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="162">
        <label>stdint.h</label>
      </node>
      <node id="174">
        <label>setjmp.h</label>
      </node>
      <node id="172">
        <label>aplus/task.h</label>
        <link refid="task_8h"/>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>errno.h</label>
      </node>
      <node id="175">
        <label>fcntl.h</label>
      </node>
      <node id="166">
        <label>stddef.h</label>
      </node>
      <node id="161">
        <label>aplus.h</label>
        <link refid="aplus_8h"/>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>sys/types.h</label>
      </node>
      <node id="164">
        <label>string.h</label>
      </node>
      <node id="170">
        <label>unistd.h</label>
      </node>
      <node id="173">
        <label>signal.h</label>
      </node>
      <node id="171">
        <label>aplus/mm.h</label>
        <link refid="mm_8h"/>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>sys/dirent.h</label>
        <link refid="dirent_8h"/>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>src/fs/fs.c</label>
        <link refid="fs.c"/>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="fs_8c_1a8e53a98b93e6b136196b2ebd99e43dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_read</definition>
        <argsstring>(struct inode *inode, char *ptr, int len)</argsstring>
        <name>fs_read</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="17" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="17" bodyend="23"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1ae2c5e8a0a372334b97024fbd9ef694c1" compoundref="fs_8h" startline="56">inode::read</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1a7d87cba454ac1212bfc2277b5792bf95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_write</definition>
        <argsstring>(struct inode *inode, char *ptr, int len)</argsstring>
        <name>fs_write</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="25" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="25" bodyend="31"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1a53a123d38834fa17e7ef5c1e5f47bba2" compoundref="fs_8h" startline="57">inode::write</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1af6320f9253c5bd1f298876fdbe41b9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structdirent" kindref="compound">dirent</ref> *</type>
        <definition>struct dirent* fs_readdir</definition>
        <argsstring>(struct inode *inode, int index)</argsstring>
        <name>fs_readdir</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="33" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="33" bodyend="49"/>
        <references refid="structdirent_1aef01e92a29cba347e6e6a5f22d4908a2" compoundref="dirent_8h" startline="36">dirent::d_ino</references>
        <references refid="structdirent_1a39a9af609c1808f0bdf90155bd3f55ed" compoundref="dirent_8h" startline="37">dirent::d_name</references>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1a1a77be0f24a6c9a18bbdbcecfb75df7c" compoundref="fs_8h" startline="41">inode::ino</references>
        <references refid="mm_8h_1a1f5d4240b2decc62c0e6eae06c72916c">kmalloc</references>
        <references refid="structinode_1ad64802d9d4ebdd1c56af5ab6e302faf0" compoundref="fs_8h" startline="38">inode::name</references>
        <references refid="structinode_1a0a54c11571f19f23322f3e6ad3ecb113" compoundref="fs_8h" startline="59">inode::readdir</references>
        <references refid="vfs_8c_1a4f7b5f17ac7c4b3a0a574d9620e0512d" compoundref="vfs_8c" startline="44" endline="56">vfs_mapped_at_index</references>
        <references refid="vfs_8c_1a829e1c063db610c46554db0e28cb2bcb" compoundref="vfs_8c" startline="58" endline="69">vfs_mapped_count</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1ad8edcff785980ccbc26c887c19ac8989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
        <definition>struct inode* fs_finddir</definition>
        <argsstring>(struct inode *inode, char *name)</argsstring>
        <name>fs_finddir</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="51" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="51" bodyend="68"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1ab6c5e2d912fdbd506086e53185cd370d" compoundref="fs_8h" startline="60">inode::finddir</references>
        <references refid="structinode_1a2d4fac4ae14332628e6fa2bd55dd3121" compoundref="fs_8h" startline="71">inode::parent</references>
        <references refid="vfs_8c_1a99334446cfc1dfc32088d838b4f2895c" compoundref="vfs_8c" startline="32" endline="42">vfs_mapped</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1a8973117250569528548e2c2ff3f6e44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
        <definition>struct inode* fs_creat</definition>
        <argsstring>(struct inode *inode, char *name, mode_t mode)</argsstring>
        <name>fs_creat</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="70" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="70" bodyend="76"/>
        <references refid="structinode_1ad622a049b34780786d9ba4311b06b3b4" compoundref="fs_8h" startline="61">inode::creat</references>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1a23db0b0dd4f66cd2cc34a9116164cfc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_rename</definition>
        <argsstring>(struct inode *inode, char *oldname, char *newname)</argsstring>
        <name>fs_rename</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>oldname</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>newname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="78" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="78" bodyend="84"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1a5a309a9c4ada7e4d062162b06125a929" compoundref="fs_8h" startline="63">inode::rename</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1ab0e4dd01b14f5ba2495318b840acdfff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_unlink</definition>
        <argsstring>(struct inode *inode, char *name)</argsstring>
        <name>fs_unlink</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="86" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="86" bodyend="92"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1adf65bac80736631b8000d3d34e953aaa" compoundref="fs_8h" startline="64">inode::unlink</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1a2928203c42eba392963b57bfed7b65c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_chown</definition>
        <argsstring>(struct inode *inode, uid_t owner, gid_t group)</argsstring>
        <name>fs_chown</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>uid_t</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>gid_t</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="94" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="94" bodyend="100"/>
        <references refid="structinode_1a8221183a697c9f2b4e0e295f5a9d8afd" compoundref="fs_8h" startline="65">inode::chown</references>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1a37ebdb2a9963f0f89d938fa2cc5d78df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fs_flush</definition>
        <argsstring>(struct inode *inode)</argsstring>
        <name>fs_flush</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="102" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="102" bodyend="108"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1ae2972ef183f5c39aac7cb83b9f8a04a8" compoundref="fs_8h" startline="66">inode::flush</references>
      </memberdef>
      <memberdef kind="function" id="fs_8c_1afb548bce2f916933a7c7d95a48b57cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fs_ioctl</definition>
        <argsstring>(struct inode *inode, int req, void *buf)</argsstring>
        <name>fs_ioctl</name>
        <param>
          <type>struct <ref refid="structinode" kindref="compound">inode</ref> *</type>
          <declname>inode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>req</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/fs/fs.c" line="110" column="1" bodyfile="/opt/prj/aPlus/src/fs/fs.c" bodystart="110" bodyend="116"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structinode_1a636843da203574bc338b016758bf8c7e" compoundref="fs_8h" startline="68">inode::ioctl</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="aplus_8h" kindref="compound">aplus.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fs_8h" kindref="compound">aplus/fs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="mm_8h" kindref="compound">aplus/mm.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="dirent_8h" kindref="compound">dirent.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="fs_8c_1a8e53a98b93e6b136196b2ebd99e43dcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fs_8c_1a8e53a98b93e6b136196b2ebd99e43dcd" kindref="member">fs_read</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1ae2c5e8a0a372334b97024fbd9ef694c1" kindref="member">read</ref>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1ae2c5e8a0a372334b97024fbd9ef694c1" kindref="member">read</ref>(inode,<sp/>ptr,<sp/>len);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="fs_8c_1a7d87cba454ac1212bfc2277b5792bf95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fs_8c_1a7d87cba454ac1212bfc2277b5792bf95" kindref="member">fs_write</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1a53a123d38834fa17e7ef5c1e5f47bba2" kindref="member">write</ref>)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1a53a123d38834fa17e7ef5c1e5f47bba2" kindref="member">write</ref>(inode,<sp/>ptr,<sp/>len);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33" refid="fs_8c_1af6320f9253c5bd1f298876fdbe41b9de" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdirent" kindref="compound">dirent</ref>*<sp/><ref refid="fs_8c_1af6320f9253c5bd1f298876fdbe41b9de" kindref="member">fs_readdir</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinode" kindref="compound">inode_t</ref>*<sp/>map<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((map<sp/>=<sp/>(<ref refid="structinode" kindref="compound">inode_t</ref>*)<sp/><ref refid="vfs_8c_1a4f7b5f17ac7c4b3a0a574d9620e0512d" kindref="member">vfs_mapped_at_index</ref>(inode,<sp/>index))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdirent" kindref="compound">dirent</ref>*<sp/>ent<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdirent" kindref="compound">dirent</ref>*)<sp/><ref refid="mm_8h_1a1f5d4240b2decc62c0e6eae06c72916c" kindref="member">kmalloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structdirent" kindref="compound">dirent</ref>));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(ent-&gt;<ref refid="structdirent_1a39a9af609c1808f0bdf90155bd3f55ed" kindref="member">d_name</ref>,<sp/>map-&gt;<ref refid="structinode_1ad64802d9d4ebdd1c56af5ab6e302faf0" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ent-&gt;<ref refid="structdirent_1aef01e92a29cba347e6e6a5f22d4908a2" kindref="member">d_ino</ref><sp/>=<sp/>map-&gt;<ref refid="structinode_1a1a77be0f24a6c9a18bbdbcecfb75df7c" kindref="member">ino</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ent;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1a0a54c11571f19f23322f3e6ad3ecb113" kindref="member">readdir</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1a0a54c11571f19f23322f3e6ad3ecb113" kindref="member">readdir</ref>(inode,<sp/>index<sp/>-<sp/><ref refid="vfs_8c_1a829e1c063db610c46554db0e28cb2bcb" kindref="member">vfs_mapped_count</ref>(inode));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="fs_8c_1ad8edcff785980ccbc26c887c19ac8989" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="fs_8c_1ad8edcff785980ccbc26c887c19ac8989" kindref="member">fs_finddir</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="attribute_8h_1aae08e5b919f01beb6c69d2859e0dfc27" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(name,<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1a2d4fac4ae14332628e6fa2bd55dd3121" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinode" kindref="compound">inode_t</ref>*<sp/>map<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((map<sp/>=<sp/>(<ref refid="structinode" kindref="compound">inode_t</ref>*)<sp/><ref refid="vfs_8c_1a99334446cfc1dfc32088d838b4f2895c" kindref="member">vfs_mapped</ref>(inode,<sp/>name))<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1ab6c5e2d912fdbd506086e53185cd370d" kindref="member">finddir</ref>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1ab6c5e2d912fdbd506086e53185cd370d" kindref="member">finddir</ref>(inode,<sp/>name);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="fs_8c_1a8973117250569528548e2c2ff3f6e44e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="fs_8c_1a8973117250569528548e2c2ff3f6e44e" kindref="member">fs_creat</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="attribute_8h_1aae08e5b919f01beb6c69d2859e0dfc27" kindref="member">name</ref>,<sp/>mode_t<sp/><ref refid="structinode_1a4902d9f6a1d7bd79c6f1bb73d83ce8e3" kindref="member">mode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1ad622a049b34780786d9ba4311b06b3b4" kindref="member">creat</ref>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1ad622a049b34780786d9ba4311b06b3b4" kindref="member">creat</ref>(inode,<sp/>name,<sp/>mode);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="fs_8c_1a23db0b0dd4f66cd2cc34a9116164cfc4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fs_8c_1a23db0b0dd4f66cd2cc34a9116164cfc4" kindref="member">fs_rename</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>oldname,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>newname)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1a5a309a9c4ada7e4d062162b06125a929" kindref="member">rename</ref>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1a5a309a9c4ada7e4d062162b06125a929" kindref="member">rename</ref>(inode,<sp/>oldname,<sp/>newname);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="fs_8c_1ab0e4dd01b14f5ba2495318b840acdfff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fs_8c_1ab0e4dd01b14f5ba2495318b840acdfff" kindref="member">fs_unlink</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="attribute_8h_1aae08e5b919f01beb6c69d2859e0dfc27" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1adf65bac80736631b8000d3d34e953aaa" kindref="member">unlink</ref>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1adf65bac80736631b8000d3d34e953aaa" kindref="member">unlink</ref>(inode,<sp/>name);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="fs_8c_1a2928203c42eba392963b57bfed7b65c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fs_8c_1a2928203c42eba392963b57bfed7b65c4" kindref="member">fs_chown</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/>uid_t<sp/>owner,<sp/>gid_t<sp/>group)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1a8221183a697c9f2b4e0e295f5a9d8afd" kindref="member">chown</ref>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1a8221183a697c9f2b4e0e295f5a9d8afd" kindref="member">chown</ref>(inode,<sp/>owner,<sp/>group);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="fs_8c_1a37ebdb2a9963f0f89d938fa2cc5d78df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="fs_8c_1a37ebdb2a9963f0f89d938fa2cc5d78df" kindref="member">fs_flush</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1ae2972ef183f5c39aac7cb83b9f8a04a8" kindref="member">flush</ref>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inode-&gt;<ref refid="structinode_1ae2972ef183f5c39aac7cb83b9f8a04a8" kindref="member">flush</ref>(inode);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="fs_8c_1afb548bce2f916933a7c7d95a48b57cdb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="fs_8c_1afb548bce2f916933a7c7d95a48b57cdb" kindref="member">fs_ioctl</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structinode" kindref="compound">inode</ref>*<sp/><ref refid="structinode" kindref="compound">inode</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>req,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inode-&gt;<ref refid="structinode_1a636843da203574bc338b016758bf8c7e" kindref="member">ioctl</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inode-&gt;<ref refid="structinode_1a636843da203574bc338b016758bf8c7e" kindref="member">ioctl</ref>(inode,<sp/>req,<sp/>buf);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>ENOSYS;<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/opt/prj/aPlus/src/fs/fs.c"/>
  </compounddef>
</doxygen>
