<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="clone_8c" kind="file">
    <compoundname>clone.c</compoundname>
    <includes refid="aplus_8h" local="no">aplus.h</includes>
    <includes refid="syscall_8h" local="no">aplus/syscall.h</includes>
    <includes refid="task_8h" local="no">aplus/task.h</includes>
    <includes local="no">errno.h</includes>
    <incdepgraph>
      <node id="1431">
        <label>sys/stat.h</label>
      </node>
      <node id="1422">
        <label>stdarg.h</label>
      </node>
      <node id="1425">
        <label>aplus/attribute.h</label>
        <link refid="attribute_8h"/>
        <childnode refid="1420" relation="include">
        </childnode>
        <childnode refid="1426" relation="include">
        </childnode>
        <childnode refid="1421" relation="include">
        </childnode>
        <childnode refid="1423" relation="include">
        </childnode>
        <childnode refid="1428" relation="include">
        </childnode>
      </node>
      <node id="1430">
        <label>aplus/fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="1421" relation="include">
        </childnode>
        <childnode refid="1427" relation="include">
        </childnode>
        <childnode refid="1428" relation="include">
        </childnode>
        <childnode refid="1431" relation="include">
        </childnode>
        <childnode refid="1432" relation="include">
        </childnode>
      </node>
      <node id="1421">
        <label>stdint.h</label>
      </node>
      <node id="1424">
        <label>aplus/syscall.h</label>
        <link refid="syscall_8h"/>
        <childnode refid="1420" relation="include">
        </childnode>
        <childnode refid="1425" relation="include">
        </childnode>
        <childnode refid="1421" relation="include">
        </childnode>
      </node>
      <node id="1435">
        <label>setjmp.h</label>
      </node>
      <node id="1429">
        <label>aplus/task.h</label>
        <link refid="task_8h"/>
        <childnode refid="1421" relation="include">
        </childnode>
        <childnode refid="1420" relation="include">
        </childnode>
        <childnode refid="1430" relation="include">
        </childnode>
        <childnode refid="1434" relation="include">
        </childnode>
        <childnode refid="1428" relation="include">
        </childnode>
        <childnode refid="1435" relation="include">
        </childnode>
      </node>
      <node id="1436">
        <label>errno.h</label>
      </node>
      <node id="1427">
        <label>stddef.h</label>
      </node>
      <node id="1426">
        <label>aplus/list.h</label>
        <link refid="list_8h"/>
        <childnode refid="1427" relation="include">
        </childnode>
        <childnode refid="1421" relation="include">
        </childnode>
        <childnode refid="1428" relation="include">
        </childnode>
      </node>
      <node id="1419">
        <label>src/syscall/clone.c</label>
        <link refid="clone.c"/>
        <childnode refid="1420" relation="include">
        </childnode>
        <childnode refid="1424" relation="include">
        </childnode>
        <childnode refid="1429" relation="include">
        </childnode>
        <childnode refid="1436" relation="include">
        </childnode>
      </node>
      <node id="1420">
        <label>aplus.h</label>
        <link refid="aplus_8h"/>
        <childnode refid="1421" relation="include">
        </childnode>
        <childnode refid="1422" relation="include">
        </childnode>
        <childnode refid="1423" relation="include">
        </childnode>
      </node>
      <node id="1428">
        <label>sys/types.h</label>
      </node>
      <node id="1423">
        <label>string.h</label>
      </node>
      <node id="1433">
        <label>unistd.h</label>
      </node>
      <node id="1434">
        <label>signal.h</label>
      </node>
      <node id="1432">
        <label>sys/dirent.h</label>
        <link refid="dirent_8h"/>
        <childnode refid="1433" relation="include">
        </childnode>
        <childnode refid="1428" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="clone_8c_1a4743b3673a8794b8e7bd0b6c91a63cd5" prot="public" static="no" mutable="no">
        <type><ref refid="task_8h_1a8aeef2cdb643462b97cd459a8e68cad3" kindref="member">task_t</ref> *</type>
        <definition>task_t* current_task</definition>
        <argsstring></argsstring>
        <name>current_task</name>
        <briefdescription>
<para>Current task address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/syscall/clone.c" line="6" column="1" bodyfile="/opt/prj/aPlus/src/sched.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="clone_8c_1a14a069ba6b991078484ac2b7573a5f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sys_clone</definition>
        <argsstring>(int(*fn)(void *), void *child_stack, int flags, void *arg)</argsstring>
        <name>sys_clone</name>
        <param>
          <type>int(*)(void *)</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>child_stack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Creates a new process.<linebreak/>
Unlike fork(2), these calls allow the child process to share parts of its execution context with the calling process, such as the memory space, the table of file descriptors, and the table of signal handlers.<linebreak/>
The main use of <ref refid="clone_8c_1a14a069ba6b991078484ac2b7573a5f23" kindref="member">sys_clone()</ref> is to implement threads: multiple threads of control in a program that run concurrently in a shared memory space. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>Is a pointer to a function that is called by the child process at the beginning of its execution. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>child_stack</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the location of the stack used by the child process.<linebreak/>
 Since the child and calling process may share memory, it is not possible for the child process to execute in the same stack as the calling process. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><linebreak/>
<itemizedlist>
<listitem><para>CLONE_FILES<linebreak/>
 The calling process and the child process share the same file descriptor table.</para></listitem><listitem><para>CLONE_SIGHAND<linebreak/>
 The calling process and the child process share the same table of signal handlers.</para></listitem><listitem><para><ref refid="task_8h_1ac07965af2ad895ca67fdc8352303fbb5" kindref="member">CLONE_VM</ref><linebreak/>
 The calling process and the child process run in the same memory space. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument is passed to the fn function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the thread ID of the child process is returned in the caller&apos;s thread of execution.<linebreak/>
 On failure, -1 is returned in the caller&apos;s context, no child process will be created, and errno will be set appropriately. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/syscall/clone.c" line="32" column="1" bodyfile="/opt/prj/aPlus/src/syscall/clone.c" bodystart="32" bodyend="49"/>
        <references refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" compoundref="errno_8c" startline="3">errno</references>
        <references refid="structtask_1ab56448ae42a75825ea923bd86648f3ae" compoundref="task_8h" startline="91">task::pid</references>
        <references refid="task_8c_1afed7d6a4dd3580596c0c925e766c4163" compoundref="task_8c" startline="54" endline="133">task_clone</references>
      </memberdef>
      <memberdef kind="function" id="clone_8c_1adeb0bff3f02079d3e65a1229d6161490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SYSCALL</definition>
        <argsstring>(sys_clone, 22)</argsstring>
        <name>SYSCALL</name>
        <param>
          <type><ref refid="clone_8c_1a14a069ba6b991078484ac2b7573a5f23" kindref="member">sys_clone</ref></type>
        </param>
        <param>
          <type>22</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/opt/prj/aPlus/src/syscall/clone.c" line="51" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="aplus_8h" kindref="compound">aplus.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="syscall_8h" kindref="compound">aplus/syscall.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="task_8h" kindref="compound">aplus/task.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structtask" kindref="compound">task_t</ref>*<sp/><ref refid="clone_8c_1a4743b3673a8794b8e7bd0b6c91a63cd5" kindref="member">current_task</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="clone_8c_1a14a069ba6b991078484ac2b7573a5f23" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="clone_8c_1a14a069ba6b991078484ac2b7573a5f23" kindref="member">sys_clone</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*fn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>child_stack,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="iso9660_8h_1aa2585d779da0ab21273a8d92de9a0ebe" kindref="member">flags</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!current_task)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fn<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtask" kindref="compound">task_t</ref>*<sp/>child<sp/>=<sp/>(<ref refid="structtask" kindref="compound">task_t</ref>*)<sp/><ref refid="task_8c_1afed7d6a4dd3580596c0c925e766c4163" kindref="member">task_clone</ref>(fn,<sp/>arg,<sp/>child_stack,<sp/>flags);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!child)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="errno_8c_1ad65a8842cc674e3ddf69355898c0ecbf" kindref="member">errno</ref><sp/>=<sp/>EFAULT;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child-&gt;<ref refid="structtask_1ab56448ae42a75825ea923bd86648f3ae" kindref="member">pid</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="clone_8c_1adeb0bff3f02079d3e65a1229d6161490" kindref="member">SYSCALL</ref>(<ref refid="clone_8c_1a14a069ba6b991078484ac2b7573a5f23" kindref="member">sys_clone</ref>,<sp/>22);</highlight></codeline>
    </programlisting>
    <location file="/opt/prj/aPlus/src/syscall/clone.c"/>
  </compounddef>
</doxygen>
